GNU gdb (Ubuntu 9.1-0ubuntu1) 9.1
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...
(gdb) b phase_2
Breakpoint 1 at 0x400ea9
(gdb) run answer1.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
1 2 3 4 5 6

Breakpoint 1, 0x0000000000400ea9 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
=> 0x0000000000400ea9 <+0>:     push   %rbp
   0x0000000000400eaa <+1>:     push   %rbx
   0x0000000000400eab <+2>:     sub    $0x28,%rsp
   0x0000000000400eaf <+6>:     mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:    mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:    xor    %eax,%eax
   0x0000000000400ebf <+22>:    mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:    callq  0x40145f <read_six_numbers> 	//We see that this phase wants an input of 6 numbers.
   0x0000000000400ec7 <+30>:    cmpl   $0x0,(%rsp)
   0x0000000000400ecb <+34>:    jne    0x400ed4 <phase_2+43>
   0x0000000000400ecd <+36>:    cmpl   $0x1,0x4(%rsp)
   0x0000000000400ed2 <+41>:    je     0x400ed9 <phase_2+48>
   0x0000000000400ed4 <+43>:    callq  0x40143d <explode_bomb>
   0x0000000000400ed9 <+48>:    mov    %rsp,%rbx
   0x0000000000400edc <+51>:    lea    0x10(%rsp),%rbp
   0x0000000000400ee1 <+56>:    mov    0x4(%rbx),%eax
   0x0000000000400ee4 <+59>:    add    (%rbx),%eax
   0x0000000000400ee6 <+61>:    cmp    %eax,0x8(%rbx)  // We are comparing something here!
   0x0000000000400ee9 <+64>:    je     0x400ef0 <phase_2+71>
   0x0000000000400eeb <+66>:    callq  0x40143d <explode_bomb>
   0x0000000000400ef0 <+71>:    add    $0x4,%rbx
   0x0000000000400ef4 <+75>:    cmp    %rbp,%rbx  //  comparing something here!
   0x0000000000400ef7 <+78>:    jne    0x400ee1 <phase_2+56>
   0x0000000000400ef9 <+80>:    mov    0x18(%rsp),%rax
   0x0000000000400efe <+85>:    xor    %fs:0x28,%rax
   0x0000000000400f07 <+94>:    je     0x400f0e <phase_2+101>
   0x0000000000400f09 <+96>:    callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f0e <+101>:   add    $0x28,%rsp
   0x0000000000400f12 <+105>:   pop    %rbx
   0x0000000000400f13 <+106>:   pop    %rbp
   0x0000000000400f14 <+107>:   retq
End of assembler dump.
(gdb) u*0x0000000000400ec2
0x0000000000400ec2 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:     push   %rbp
   0x0000000000400eaa <+1>:     push   %rbx
   0x0000000000400eab <+2>:     sub    $0x28,%rsp
   0x0000000000400eaf <+6>:     mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:    mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:    xor    %eax,%eax
   0x0000000000400ebf <+22>:    mov    %rsp,%rsi
=> 0x0000000000400ec2 <+25>:    callq  0x40145f <read_six_numbers>
   0x0000000000400ec7 <+30>:    cmpl   $0x0,(%rsp)
   0x0000000000400ecb <+34>:    jne    0x400ed4 <phase_2+43>
   0x0000000000400ecd <+36>:    cmpl   $0x1,0x4(%rsp)
   0x0000000000400ed2 <+41>:    je     0x400ed9 <phase_2+48>
   0x0000000000400ed4 <+43>:    callq  0x40143d <explode_bomb>
   0x0000000000400ed9 <+48>:    mov    %rsp,%rbx
   0x0000000000400edc <+51>:    lea    0x10(%rsp),%rbp
   0x0000000000400ee1 <+56>:    mov    0x4(%rbx),%eax
   0x0000000000400ee4 <+59>:    add    (%rbx),%eax
   0x0000000000400ee6 <+61>:    cmp    %eax,0x8(%rbx)
   0x0000000000400ee9 <+64>:    je     0x400ef0 <phase_2+71>
   0x0000000000400eeb <+66>:    callq  0x40143d <explode_bomb>
   0x0000000000400ef0 <+71>:    add    $0x4,%rbx
   0x0000000000400ef4 <+75>:    cmp    %rbp,%rbx
   0x0000000000400ef7 <+78>:    jne    0x400ee1 <phase_2+56>
   0x0000000000400ef9 <+80>:    mov    0x18(%rsp),%rax
   0x0000000000400efe <+85>:    xor    %fs:0x28,%rax
   0x0000000000400f07 <+94>:    je     0x400f0e <phase_2+101>
   0x0000000000400f09 <+96>:    callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f0e <+101>:   add    $0x28,%rsp
   0x0000000000400f12 <+105>:   pop    %rbx
   0x0000000000400f13 <+106>:   pop    %rbp
   0x0000000000400f14 <+107>:   retq
End of assembler dump.

//Lets put in "1 2 3 4 5 6" as our test input and disas <read_six_numbers> by si

(gdb) si
0x000000000040145f in read_six_numbers ()
(gdb) disas
Dump of assembler code for function read_six_numbers:
=> 0x000000000040145f <+0>:     sub    $0x8,%rsp
   0x0000000000401463 <+4>:     mov    %rsi,%rdx
   0x0000000000401466 <+7>:     lea    0x4(%rsi),%rcx
   0x000000000040146a <+11>:    lea    0x14(%rsi),%rax
   0x000000000040146e <+15>:    push   %rax
   0x000000000040146f <+16>:    lea    0x10(%rsi),%rax
   0x0000000000401473 <+20>:    push   %rax
   0x0000000000401474 <+21>:    lea    0xc(%rsi),%r9
   0x0000000000401478 <+25>:    lea    0x8(%rsi),%r8
   0x000000000040147c <+29>:    mov    $0x4025c3,%esi	 //$0x4025c3 is being put into %esi
   0x0000000000401481 <+34>:    mov    $0x0,%eax
   0x0000000000401486 <+39>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x000000000040148b <+44>:    add    $0x10,%rsp
   0x000000000040148f <+48>:    cmp    $0x5,%eax 	//If the % eax is greater than 5, we pass the explode bomb.
   0x0000000000401492 <+51>:    jg     0x401499 <read_six_numbers+58>
   0x0000000000401494 <+53>:    callq  0x40143d <explode_bomb>
   0x0000000000401499 <+58>:    add    $0x8,%rsp	 //Lets set breakpoint here as safety!
   0x000000000040149d <+62>:    retq
End of assembler dump.
(gdb) u*0x000000000040147c

(gdb) disas
Dump of assembler code for function read_six_numbers:
   0x000000000040145f <+0>:     sub    $0x8,%rsp
   0x0000000000401463 <+4>:     mov    %rsi,%rdx
   0x0000000000401466 <+7>:     lea    0x4(%rsi),%rcx
   0x000000000040146a <+11>:    lea    0x14(%rsi),%rax
   0x000000000040146e <+15>:    push   %rax
   0x000000000040146f <+16>:    lea    0x10(%rsi),%rax
   0x0000000000401473 <+20>:    push   %rax
   0x0000000000401474 <+21>:    lea    0xc(%rsi),%r9
   0x0000000000401478 <+25>:    lea    0x8(%rsi),%r8
=> 0x000000000040147c <+29>:    mov    $0x4025c3,%esi
   0x0000000000401481 <+34>:    mov    $0x0,%eax
   0x0000000000401486 <+39>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x000000000040148b <+44>:    add    $0x10,%rsp
   0x000000000040148f <+48>:    cmp    $0x5,%eax
   0x0000000000401492 <+51>:    jg     0x401499 <read_six_numbers+58>
   0x0000000000401494 <+53>:    callq  0x40143d <explode_bomb>
   0x0000000000401499 <+58>:    add    $0x8,%rsp
   0x000000000040149d <+62>:    retq
End of assembler dump.

//Lets check what is 0x402799

(gdb) x/s 0x4025c3
0x4025c3:       "%d %d %d %d %d %d"

Breakpoint 1, 0x0000000000400ea9 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
=> 0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145f <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x0,(%rsp)
   0x0000000000400ecb <+34>:	jne    0x400ed4 <phase_2+43>
   0x0000000000400ecd <+36>:	cmpl   $0x1,0x4(%rsp)
   0x0000000000400ed2 <+41>:	je     0x400ed9 <phase_2+48>
   0x0000000000400ed4 <+43>:	callq  0x40143d <explode_bomb>
   0x0000000000400ed9 <+48>:	mov    %rsp,%rbx
   0x0000000000400edc <+51>:	lea    0x10(%rsp),%rbp
   0x0000000000400ee1 <+56>:	mov    0x4(%rbx),%eax
   0x0000000000400ee4 <+59>:	add    (%rbx),%eax
   0x0000000000400ee6 <+61>:	cmp    %eax,0x8(%rbx)
   0x0000000000400ee9 <+64>:	je     0x400ef0 <phase_2+71>
   0x0000000000400eeb <+66>:	callq  0x40143d <explode_bomb>
   0x0000000000400ef0 <+71>:	add    $0x4,%rbx
   0x0000000000400ef4 <+75>:	cmp    %rbp,%rbx
   0x0000000000400ef7 <+78>:	jne    0x400ee1 <phase_2+56>
   0x0000000000400ef9 <+80>:	mov    0x18(%rsp),%rax
   0x0000000000400efe <+85>:	xor    %fs:0x28,%rax
   0x0000000000400f07 <+94>:	je     0x400f0e <phase_2+101>
   0x0000000000400f09 <+96>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f0e <+101>:	add    $0x28,%rsp
   0x0000000000400f12 <+105>:	pop    %rbx
   0x0000000000400f13 <+106>:	pop    %rbp
   0x0000000000400f14 <+107>:	retq   
End of assembler dump.
(gdb) u* 0x0000000000400ec2
0x0000000000400ec2 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
=> 0x0000000000400ec2 <+25>:	callq  0x40145f <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x0,(%rsp)
   0x0000000000400ecb <+34>:	jne    0x400ed4 <phase_2+43>
   0x0000000000400ecd <+36>:	cmpl   $0x1,0x4(%rsp)
   0x0000000000400ed2 <+41>:	je     0x400ed9 <phase_2+48>
   0x0000000000400ed4 <+43>:	callq  0x40143d <explode_bomb>
   0x0000000000400ed9 <+48>:	mov    %rsp,%rbx
   0x0000000000400edc <+51>:	lea    0x10(%rsp),%rbp
   0x0000000000400ee1 <+56>:	mov    0x4(%rbx),%eax
   0x0000000000400ee4 <+59>:	add    (%rbx),%eax
   0x0000000000400ee6 <+61>:	cmp    %eax,0x8(%rbx)
   0x0000000000400ee9 <+64>:	je     0x400ef0 <phase_2+71>
   0x0000000000400eeb <+66>:	callq  0x40143d <explode_bomb>
   0x0000000000400ef0 <+71>:	add    $0x4,%rbx
   0x0000000000400ef4 <+75>:	cmp    %rbp,%rbx
   0x0000000000400ef7 <+78>:	jne    0x400ee1 <phase_2+56>
   0x0000000000400ef9 <+80>:	mov    0x18(%rsp),%rax
   0x0000000000400efe <+85>:	xor    %fs:0x28,%rax
   0x0000000000400f07 <+94>:	je     0x400f0e <phase_2+101>
   0x0000000000400f09 <+96>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f0e <+101>:	add    $0x28,%rsp
   0x0000000000400f12 <+105>:	pop    %rbx
   0x0000000000400f13 <+106>:	pop    %rbp
   0x0000000000400f14 <+107>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400ec7 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145f <read_six_numbers>
=> 0x0000000000400ec7 <+30>:	cmpl   $0x0,(%rsp) 	//comparing 0 ans rsp value
   0x0000000000400ecb <+34>:	jne    0x400ed4 <phase_2+43> 	//jump if $0x0 and (%rsp) are not equal
   0x0000000000400ecd <+36>:	cmpl   $0x1,0x4(%rsp) 	//comparing 1 ans rsp value
   0x0000000000400ed2 <+41>:	je     0x400ed9 <phase_2+48> 	//jump if $0x1 and 0x4(%rsp) are equal
   0x0000000000400ed4 <+43>:	callq  0x40143d <explode_bomb>
   0x0000000000400ed9 <+48>:	mov    %rsp,%rbx
   0x0000000000400edc <+51>:	lea    0x10(%rsp),%rbp
   0x0000000000400ee1 <+56>:	mov    0x4(%rbx),%eax
   0x0000000000400ee4 <+59>:	add    (%rbx),%eax
   0x0000000000400ee6 <+61>:	cmp    %eax,0x8(%rbx) 	//comparing %eax and 0x8(%rbx) value
   0x0000000000400ee9 <+64>:	je     0x400ef0 <phase_2+71> 	//Jump if %eax and 0x8(%rbx) value are equal
   0x0000000000400eeb <+66>:	callq  0x40143d <explode_bomb>
   0x0000000000400ef0 <+71>:	add    $0x4,%rbx
   0x0000000000400ef4 <+75>:	cmp    %rbp,%rbx // comaparing values
   0x0000000000400ef7 <+78>:	jne    0x400ee1 <phase_2+56> 	//jump if above two values are not equal
   0x0000000000400ef9 <+80>:	mov    0x18(%rsp),%rax
   0x0000000000400efe <+85>:	xor    %fs:0x28,%rax
   0x0000000000400f07 <+94>:	je     0x400f0e <phase_2+101>
   0x0000000000400f09 <+96>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f0e <+101>:	add    $0x28,%rsp
   0x0000000000400f12 <+105>:	pop    %rbx
   0x0000000000400f13 <+106>:	pop    %rbp
   0x0000000000400f14 <+107>:	retq   
End of assembler dump.
(gdb) i r
rax            0x6                 6
rbx            0x7fffffffdef8      140737488346872
rcx            0x0                 0
rdx            0x7fffffffddd4      140737488346580
rsi            0x0                 0
rdi            0x7fffffffd750      140737488344912
rbp            0x0                 0x0
rsp            0x7fffffffddc0      0x7fffffffddc0
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f62ac0      140737353493184
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdef0      140737488346864
r14            0x0                 0
r15            0x0                 0
rip            0x400ec7            0x400ec7 <phase_2+30>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
//figure out rsp value
(gdb) x/d 0x7fffffffddc0
0x7fffffffddc0:	1
(gdb) run answer1.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
0 1 2 3 4 5

Breakpoint 1, 0x0000000000400ea9 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
=> 0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145f <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x0,(%rsp)
   0x0000000000400ecb <+34>:	jne    0x400ed4 <phase_2+43>
   0x0000000000400ecd <+36>:	cmpl   $0x1,0x4(%rsp)
   0x0000000000400ed2 <+41>:	je     0x400ed9 <phase_2+48>
   0x0000000000400ed4 <+43>:	callq  0x40143d <explode_bomb>
   0x0000000000400ed9 <+48>:	mov    %rsp,%rbx
   0x0000000000400edc <+51>:	lea    0x10(%rsp),%rbp
   0x0000000000400ee1 <+56>:	mov    0x4(%rbx),%eax
   0x0000000000400ee4 <+59>:	add    (%rbx),%eax
   0x0000000000400ee6 <+61>:	cmp    %eax,0x8(%rbx)
   0x0000000000400ee9 <+64>:	je     0x400ef0 <phase_2+71>
   0x0000000000400eeb <+66>:	callq  0x40143d <explode_bomb>
   0x0000000000400ef0 <+71>:	add    $0x4,%rbx
   0x0000000000400ef4 <+75>:	cmp    %rbp,%rbx
   0x0000000000400ef7 <+78>:	jne    0x400ee1 <phase_2+56>
   0x0000000000400ef9 <+80>:	mov    0x18(%rsp),%rax
   0x0000000000400efe <+85>:	xor    %fs:0x28,%rax
   0x0000000000400f07 <+94>:	je     0x400f0e <phase_2+101>
   0x0000000000400f09 <+96>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f0e <+101>:	add    $0x28,%rsp
   0x0000000000400f12 <+105>:	pop    %rbx
   0x0000000000400f13 <+106>:	pop    %rbp
   0x0000000000400f14 <+107>:	retq   
End of assembler dump.
(gdb) u*0x0000000000400ec7
0x0000000000400ec7 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145f <read_six_numbers>
=> 0x0000000000400ec7 <+30>:	cmpl   $0x0,(%rsp)
   0x0000000000400ecb <+34>:	jne    0x400ed4 <phase_2+43>
   0x0000000000400ecd <+36>:	cmpl   $0x1,0x4(%rsp)
   0x0000000000400ed2 <+41>:	je     0x400ed9 <phase_2+48>
   0x0000000000400ed4 <+43>:	callq  0x40143d <explode_bomb>
   0x0000000000400ed9 <+48>:	mov    %rsp,%rbx
   0x0000000000400edc <+51>:	lea    0x10(%rsp),%rbp
   0x0000000000400ee1 <+56>:	mov    0x4(%rbx),%eax
   0x0000000000400ee4 <+59>:	add    (%rbx),%eax
   0x0000000000400ee6 <+61>:	cmp    %eax,0x8(%rbx)
   0x0000000000400ee9 <+64>:	je     0x400ef0 <phase_2+71>
   0x0000000000400eeb <+66>:	callq  0x40143d <explode_bomb>
   0x0000000000400ef0 <+71>:	add    $0x4,%rbx
   0x0000000000400ef4 <+75>:	cmp    %rbp,%rbx
   0x0000000000400ef7 <+78>:	jne    0x400ee1 <phase_2+56>
   0x0000000000400ef9 <+80>:	mov    0x18(%rsp),%rax
   0x0000000000400efe <+85>:	xor    %fs:0x28,%rax
   0x0000000000400f07 <+94>:	je     0x400f0e <phase_2+101>
   0x0000000000400f09 <+96>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f0e <+101>:	add    $0x28,%rsp
   0x0000000000400f12 <+105>:	pop    %rbx
   0x0000000000400f13 <+106>:	pop    %rbp
   0x0000000000400f14 <+107>:	retq   
End of assembler dump.
(gdb) i r
rax            0x6                 6
rbx            0x7fffffffdef8      140737488346872
rcx            0x0                 0
rdx            0x7fffffffddd4      140737488346580
rsi            0x0                 0
rdi            0x7fffffffd750      140737488344912
rbp            0x0                 0x0
rsp            0x7fffffffddc0      0x7fffffffddc0
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f62ac0      140737353493184
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdef0      140737488346864
r14            0x0                 0
r15            0x0                 0
rip            0x400ec7            0x400ec7 <phase_2+30>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 0x7fffffffddc0
0x7fffffffddc0:	0
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145f <read_six_numbers>
=> 0x0000000000400ec7 <+30>:	cmpl   $0x0,(%rsp)
   0x0000000000400ecb <+34>:	jne    0x400ed4 <phase_2+43>
   0x0000000000400ecd <+36>:	cmpl   $0x1,0x4(%rsp)
   0x0000000000400ed2 <+41>:	je     0x400ed9 <phase_2+48>
   0x0000000000400ed4 <+43>:	callq  0x40143d <explode_bomb>
   0x0000000000400ed9 <+48>:	mov    %rsp,%rbx
   0x0000000000400edc <+51>:	lea    0x10(%rsp),%rbp
   0x0000000000400ee1 <+56>:	mov    0x4(%rbx),%eax
   0x0000000000400ee4 <+59>:	add    (%rbx),%eax
   0x0000000000400ee6 <+61>:	cmp    %eax,0x8(%rbx)
   0x0000000000400ee9 <+64>:	je     0x400ef0 <phase_2+71>
   0x0000000000400eeb <+66>:	callq  0x40143d <explode_bomb>
   0x0000000000400ef0 <+71>:	add    $0x4,%rbx
   0x0000000000400ef4 <+75>:	cmp    %rbp,%rbx
   0x0000000000400ef7 <+78>:	jne    0x400ee1 <phase_2+56>
   0x0000000000400ef9 <+80>:	mov    0x18(%rsp),%rax
   0x0000000000400efe <+85>:	xor    %fs:0x28,%rax
   0x0000000000400f07 <+94>:	je     0x400f0e <phase_2+101>
   0x0000000000400f09 <+96>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f0e <+101>:	add    $0x28,%rsp
   0x0000000000400f12 <+105>:	pop    %rbx
   0x0000000000400f13 <+106>:	pop    %rbp
   0x0000000000400f14 <+107>:	retq   
End of assembler dump.
(gdb) u*   0x0000000000400ecd
0x0000000000400ecd in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145f <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x0,(%rsp)
   0x0000000000400ecb <+34>:	jne    0x400ed4 <phase_2+43>
=> 0x0000000000400ecd <+36>:	cmpl   $0x1,0x4(%rsp)
   0x0000000000400ed2 <+41>:	je     0x400ed9 <phase_2+48>
   0x0000000000400ed4 <+43>:	callq  0x40143d <explode_bomb>
   0x0000000000400ed9 <+48>:	mov    %rsp,%rbx
   0x0000000000400edc <+51>:	lea    0x10(%rsp),%rbp
   0x0000000000400ee1 <+56>:	mov    0x4(%rbx),%eax
   0x0000000000400ee4 <+59>:	add    (%rbx),%eax
   0x0000000000400ee6 <+61>:	cmp    %eax,0x8(%rbx)
   0x0000000000400ee9 <+64>:	je     0x400ef0 <phase_2+71>
   0x0000000000400eeb <+66>:	callq  0x40143d <explode_bomb>
   0x0000000000400ef0 <+71>:	add    $0x4,%rbx
   0x0000000000400ef4 <+75>:	cmp    %rbp,%rbx
   0x0000000000400ef7 <+78>:	jne    0x400ee1 <phase_2+56>
   0x0000000000400ef9 <+80>:	mov    0x18(%rsp),%rax
   0x0000000000400efe <+85>:	xor    %fs:0x28,%rax
   0x0000000000400f07 <+94>:	je     0x400f0e <phase_2+101>
   0x0000000000400f09 <+96>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f0e <+101>:	add    $0x28,%rsp
   0x0000000000400f12 <+105>:	pop    %rbx
   0x0000000000400f13 <+106>:	pop    %rbp
   0x0000000000400f14 <+107>:	retq   
End of assembler dump.
(gdb) i r
rax            0x6                 6
rbx            0x7fffffffdef8      140737488346872
rcx            0x0                 0
rdx            0x7fffffffddd4      140737488346580
rsi            0x0                 0
rdi            0x7fffffffd750      140737488344912
rbp            0x0                 0x0
rsp            0x7fffffffddc0      0x7fffffffddc0
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f62ac0      140737353493184
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdef0      140737488346864
r14            0x0                 0
r15            0x0                 0
rip            0x400ecd            0x400ecd <phase_2+36>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/2d 0x7fffffffddc0
0x7fffffffddc0:	0	1
(gdb) u* 0x0000000000400ed9
0x0000000000400ed9 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145f <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x0,(%rsp)
   0x0000000000400ecb <+34>:	jne    0x400ed4 <phase_2+43>
   0x0000000000400ecd <+36>:	cmpl   $0x1,0x4(%rsp)
   0x0000000000400ed2 <+41>:	je     0x400ed9 <phase_2+48>
   0x0000000000400ed4 <+43>:	callq  0x40143d <explode_bomb>
=> 0x0000000000400ed9 <+48>:	mov    %rsp,%rbx
   0x0000000000400edc <+51>:	lea    0x10(%rsp),%rbp
   0x0000000000400ee1 <+56>:	mov    0x4(%rbx),%eax
   0x0000000000400ee4 <+59>:	add    (%rbx),%eax
   0x0000000000400ee6 <+61>:	cmp    %eax,0x8(%rbx)
   0x0000000000400ee9 <+64>:	je     0x400ef0 <phase_2+71>
   0x0000000000400eeb <+66>:	callq  0x40143d <explode_bomb>
   0x0000000000400ef0 <+71>:	add    $0x4,%rbx
   0x0000000000400ef4 <+75>:	cmp    %rbp,%rbx
   0x0000000000400ef7 <+78>:	jne    0x400ee1 <phase_2+56>
   0x0000000000400ef9 <+80>:	mov    0x18(%rsp),%rax
   0x0000000000400efe <+85>:	xor    %fs:0x28,%rax
   0x0000000000400f07 <+94>:	je     0x400f0e <phase_2+101>
   0x0000000000400f09 <+96>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f0e <+101>:	add    $0x28,%rsp
   0x0000000000400f12 <+105>:	pop    %rbx
   0x0000000000400f13 <+106>:	pop    %rbp
   0x0000000000400f14 <+107>:	retq   
End of assembler dump.
(gdb) i r
rax            0x6                 6
rbx            0x7fffffffdef8      140737488346872
rcx            0x0                 0
rdx            0x7fffffffddd4      140737488346580
rsi            0x0                 0
rdi            0x7fffffffd750      140737488344912
rbp            0x0                 0x0
rsp            0x7fffffffddc0      0x7fffffffddc0
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f62ac0      140737353493184
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdef0      140737488346864
r14            0x0                 0
r15            0x0                 0
rip            0x400ed9            0x400ed9 <phase_2+48>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 0x7fffffffdef8 
0x7fffffffdef8:	-7578
(gdb) x/d rbx
No symbol "rbx" in current context.
(gdb) p/x $rbx
$1 = 0x7fffffffdef8
(gdb) x/d 0x7fffffffdef8
0x7fffffffdef8:	-7578
(gdb) u*0x0000000000400ee4
0x0000000000400ee4 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145f <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x0,(%rsp)
   0x0000000000400ecb <+34>:	jne    0x400ed4 <phase_2+43>
   0x0000000000400ecd <+36>:	cmpl   $0x1,0x4(%rsp)
   0x0000000000400ed2 <+41>:	je     0x400ed9 <phase_2+48>
   0x0000000000400ed4 <+43>:	callq  0x40143d <explode_bomb>
   0x0000000000400ed9 <+48>:	mov    %rsp,%rbx
   0x0000000000400edc <+51>:	lea    0x10(%rsp),%rbp
   0x0000000000400ee1 <+56>:	mov    0x4(%rbx),%eax
=> 0x0000000000400ee4 <+59>:	add    (%rbx),%eax
   0x0000000000400ee6 <+61>:	cmp    %eax,0x8(%rbx)
   0x0000000000400ee9 <+64>:	je     0x400ef0 <phase_2+71>
   0x0000000000400eeb <+66>:	callq  0x40143d <explode_bomb>
   0x0000000000400ef0 <+71>:	add    $0x4,%rbx
   0x0000000000400ef4 <+75>:	cmp    %rbp,%rbx
   0x0000000000400ef7 <+78>:	jne    0x400ee1 <phase_2+56>
   0x0000000000400ef9 <+80>:	mov    0x18(%rsp),%rax
   0x0000000000400efe <+85>:	xor    %fs:0x28,%rax
   0x0000000000400f07 <+94>:	je     0x400f0e <phase_2+101>
   0x0000000000400f09 <+96>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f0e <+101>:	add    $0x28,%rsp
   0x0000000000400f12 <+105>:	pop    %rbx
   0x0000000000400f13 <+106>:	pop    %rbp
   0x0000000000400f14 <+107>:	retq   
End of assembler dump.
(gdb) i r
rax            0x1                 1
rbx            0x7fffffffddc0      140737488346560
rcx            0x0                 0
rdx            0x7fffffffddd4      140737488346580
rsi            0x0                 0
rdi            0x7fffffffd750      140737488344912
rbp            0x7fffffffddd0      0x7fffffffddd0
rsp            0x7fffffffddc0      0x7fffffffddc0
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f62ac0      140737353493184
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdef0      140737488346864
r14            0x0                 0
r15            0x0                 0
rip            0x400ee4            0x400ee4 <phase_2+59>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 0x7fffffffddc0
0x7fffffffddc0:	0
(gdb) ni
0x0000000000400ee6 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145f <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x0,(%rsp)
   0x0000000000400ecb <+34>:	jne    0x400ed4 <phase_2+43>
   0x0000000000400ecd <+36>:	cmpl   $0x1,0x4(%rsp)
   0x0000000000400ed2 <+41>:	je     0x400ed9 <phase_2+48>
   0x0000000000400ed4 <+43>:	callq  0x40143d <explode_bomb>
   0x0000000000400ed9 <+48>:	mov    %rsp,%rbx
   0x0000000000400edc <+51>:	lea    0x10(%rsp),%rbp
   0x0000000000400ee1 <+56>:	mov    0x4(%rbx),%eax
   0x0000000000400ee4 <+59>:	add    (%rbx),%eax
=> 0x0000000000400ee6 <+61>:	cmp    %eax,0x8(%rbx)
   0x0000000000400ee9 <+64>:	je     0x400ef0 <phase_2+71>
   0x0000000000400eeb <+66>:	callq  0x40143d <explode_bomb>
   0x0000000000400ef0 <+71>:	add    $0x4,%rbx
   0x0000000000400ef4 <+75>:	cmp    %rbp,%rbx
   0x0000000000400ef7 <+78>:	jne    0x400ee1 <phase_2+56>
   0x0000000000400ef9 <+80>:	mov    0x18(%rsp),%rax
   0x0000000000400efe <+85>:	xor    %fs:0x28,%rax
   0x0000000000400f07 <+94>:	je     0x400f0e <phase_2+101>
   0x0000000000400f09 <+96>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f0e <+101>:	add    $0x28,%rsp
   0x0000000000400f12 <+105>:	pop    %rbx
   0x0000000000400f13 <+106>:	pop    %rbp
   0x0000000000400f14 <+107>:	retq   
End of assembler dump.
(gdb) i r
rax            0x1                 1
rbx            0x7fffffffddc0      140737488346560
rcx            0x0                 0
rdx            0x7fffffffddd4      140737488346580
rsi            0x0                 0
rdi            0x7fffffffd750      140737488344912
rbp            0x7fffffffddd0      0x7fffffffddd0
rsp            0x7fffffffddc0      0x7fffffffddc0
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f62ac0      140737353493184
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdef0      140737488346864
r14            0x0                 0
r15            0x0                 0
rip            0x400ee6            0x400ee6 <phase_2+61>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/3d 0x7fffffffddc0 
0x7fffffffddc0:	0	1	2
(gdb) run answer1.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
0 1 1 2 3 5

Breakpoint 1, 0x0000000000400ea9 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
=> 0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145f <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x0,(%rsp)
   0x0000000000400ecb <+34>:	jne    0x400ed4 <phase_2+43>
   0x0000000000400ecd <+36>:	cmpl   $0x1,0x4(%rsp)
   0x0000000000400ed2 <+41>:	je     0x400ed9 <phase_2+48>
   0x0000000000400ed4 <+43>:	callq  0x40143d <explode_bomb>
   0x0000000000400ed9 <+48>:	mov    %rsp,%rbx
   0x0000000000400edc <+51>:	lea    0x10(%rsp),%rbp
   0x0000000000400ee1 <+56>:	mov    0x4(%rbx),%eax
   0x0000000000400ee4 <+59>:	add    (%rbx),%eax
   0x0000000000400ee6 <+61>:	cmp    %eax,0x8(%rbx)
   0x0000000000400ee9 <+64>:	je     0x400ef0 <phase_2+71>
   0x0000000000400eeb <+66>:	callq  0x40143d <explode_bomb>
   0x0000000000400ef0 <+71>:	add    $0x4,%rbx
   0x0000000000400ef4 <+75>:	cmp    %rbp,%rbx
   0x0000000000400ef7 <+78>:	jne    0x400ee1 <phase_2+56>
   0x0000000000400ef9 <+80>:	mov    0x18(%rsp),%rax
   0x0000000000400efe <+85>:	xor    %fs:0x28,%rax
   0x0000000000400f07 <+94>:	je     0x400f0e <phase_2+101>
   0x0000000000400f09 <+96>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f0e <+101>:	add    $0x28,%rsp
   0x0000000000400f12 <+105>:	pop    %rbx
   0x0000000000400f13 <+106>:	pop    %rbp
   0x0000000000400f14 <+107>:	retq   
End of assembler dump.
(gdb) u* 0x0000000000400f14
main (argc=<optimized out>, argv=<optimized out>) at bomb.c:83
83	    phase_defused();
(gdb) 

